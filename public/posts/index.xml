<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dan Skaf</title>
        <link>http://danskaf.dev/posts/</link>
        <description>Recent content in Posts on Dan Skaf</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 25 Jul 2021 17:05:47 +1200</lastBuildDate>
        <atom:link href="http://danskaf.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Home VPN</title>
            <link>http://danskaf.dev/posts/2021/07/home-vpn/</link>
            <pubDate>Sun, 25 Jul 2021 17:05:47 +1200</pubDate>
            
            <guid>http://danskaf.dev/posts/2021/07/home-vpn/</guid>
            <description>As the amount of services I have running on my home-network increases it&amp;rsquo;s become more and more sensible to have a secure way of accessing them while out of the house.
Work in progress
 References and links  Padlock vector image used under creative commons license 4.0 Nyr Wireguard install script  </description>
            <content type="html"><![CDATA[<p><img src="padlock.png" alt="padlock"></p>
<p>As the amount of services I have running on my home-network increases it&rsquo;s become
more and more sensible to have a secure way of accessing them while out of the
house.</p>
<p><em>Work in progress</em></p>
<hr>
<h3 id="references-and-links">References and links</h3>
<ul>
<li><a href="https://commons.wikimedia.org/wiki/File:Antu_object-unlocked.svg">Padlock vector image used under creative commons license 4.0</a></li>
<li><a href="https://github.com/Nyr/wireguard-install">Nyr Wireguard install script</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>User Systemd Service</title>
            <link>http://danskaf.dev/posts/2021/07/user-systemd-service/</link>
            <pubDate>Sat, 17 Jul 2021 14:23:04 +1200</pubDate>
            
            <guid>http://danskaf.dev/posts/2021/07/user-systemd-service/</guid>
            <description>Creating your own systemd services.
I recently created a discord bot, and constantly starting it manually was frustrating. As most linux distributions come with Systemd, I decided to use this opportunity to learn to create custom services and solve my problem.
Though this blog post refers to a python script you can use it with any script or program of your choice.
Dependencies  A &amp;ldquo;bloated&amp;rdquo; linux distro that uses systemd A script or program to manage   Systemd service files are located in the /etc/systemd/system/ directory.</description>
            <content type="html"><![CDATA[<p><img src="page-logo.png" alt="systemdlogo"></p>
<p>Creating your own systemd services.</p>
<p>I recently created a discord bot, and constantly starting it manually was
frustrating. As most linux distributions come with Systemd, I decided to use
this opportunity to learn to create custom services and solve my problem.</p>
<p>Though this blog post refers to a python script you can use it with any script
or program of your choice.</p>
<h3 id="dependencies">Dependencies</h3>
<ul>
<li>A &ldquo;bloated&rdquo; linux distro that uses systemd</li>
<li>A script or program to manage</li>
</ul>
<hr>
<p>Systemd service files are located in the <code>/etc/systemd/system/</code> directory.</p>
<p>Create a unit file with your chosen name of your service followed by <code>.service</code>
, mine for instance was:</p>
<pre><code>/etc/systemd/system/ $ sudo touch discord-bot.service
</code></pre><p>This is my file I will explain the relevant parts below</p>
<pre><code>[Unit]
Description=&lt;short_description_of_program&gt;
After=network.target
StartLimitIntervalsec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=&lt;your_username&gt;
WorkingDirectory=&lt;path_to_program_files&gt;
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=&lt;program_ID&gt;
ExecStart=/usr/bin/python3 /home/&lt;user&gt;/discordBot/main.py

[Install]
WantedBy=multi-user.target
</code></pre><p>In the <code>[Unit]</code> section we can handle dependencies, as my bot needs to be
connected to the internet we specify the <code>After</code> option for the service to only
start after the network interfaces are up.</p>
<p>In the <code>[Service]</code> section we can set the type of the service, the Arch-Wiki<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
provides an in depth description of the different service types.
For most cases <code>Type=simple</code> will be all you need. <code>User</code> will  be the normal
user who is running the service.</p>
<p>For <code>ExecStart</code> we specify the command that is being run.
In my case the line in the unit file:</p>
<pre><code>ExecStart=/usr/bin/python3 /home/discordBot/main.py
</code></pre><p>is the same as running the following command while <code>cd</code> into the working directory
of my bot:</p>
<pre><code>$ python3 main.py
</code></pre><p>You may need to specify a working directory that contains any other files needed
for the runtime of your service. This is accomplished with the
<code>WorkingDirectory</code> option, in my case this directory contained the token files
for the discord api.</p>
<h3 id="logging">logging</h3>
<p>We added 3 special options to enable logging of our service</p>
<ul>
<li><code>StandardOutput=syslog</code></li>
<li><code>StandardError=syslog</code></li>
<li><code>SyslogIdentifier=&lt;program_ID&gt;</code></li>
</ul>
<p>This redirects all stdout and stderr to the syslog, we need to create a unique
program identifier.</p>
<p>Next create a file in <code>/etc/rsyslog.d/&lt;service_name&gt;.conf</code></p>
<pre><code>if $programname = '&lt;program_ID&gt;' then /path/to/log/file.log
&amp; stop
</code></pre><p>and then set the logfile ownership to the syslog user with:</p>
<pre><code># chown syslog:adm /path/to/file.log
</code></pre><hr>
<p>All thats left is to restart the restart the rsyslog service.</p>
<pre><code># systemctl restart rsyslog
</code></pre><p>Enable our newly created service so it starts on boot.</p>
<pre><code># systemctl enable discordBot.service
</code></pre><p>Start the service.</p>
<pre><code># systemctl start discordBot.service
</code></pre><h3 id="references">References</h3>
<ul>
<li>
<p><a href="https://github.com/systemd/brand.systemd.io/blob/master/assets/page-logo.png">systemd logo used under creative commons license 4.0</a></p>
</li>
<li>
<p><a href="https://wiki.archlinux.org/title/systemd">Archwiki</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/37585758/how-to-redirect-output-of-systemd-service-to-a-file">Stack Overflow</a></p>
</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://wiki.archlinux.org/title/Systemd#Service_types">Service Types - Arch wiki</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Hosted on My Pi</title>
            <link>http://danskaf.dev/posts/2021/06/hosted-on-my-pi/</link>
            <pubDate>Thu, 24 Jun 2021 16:10:26 +1200</pubDate>
            
            <guid>http://danskaf.dev/posts/2021/06/hosted-on-my-pi/</guid>
            <description>This site is hosted using Apache web server on Raspberry Pi OS.
As a brief guide:
 Ensure all repos and packages are up to date. Install the Apache server and enable the ssl and rewrite modules for https support. Enable the service to start at boot. Copy the html files to the webserver directory.  </description>
            <content type="html"><![CDATA[<p><img src="serverPi.jpg" alt="ServerPi"></p>
<p>This site is hosted using <code>Apache web server</code> on <code>Raspberry Pi OS</code>.</p>
<p>As a brief guide:</p>
<ol>
<li>Ensure all repos and packages are up to date.</li>
<li>Install the <code>Apache</code> server and enable the <code>ssl</code> and <code>rewrite</code> modules for
https support.</li>
<li>Enable the service to start at boot.</li>
<li>Copy the html files to the webserver directory.</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
