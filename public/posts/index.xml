<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dan Skaf</title>
        <link>http://danskaf.dev/posts/</link>
        <description>Recent content in Posts on Dan Skaf</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 25 Jul 2021 17:05:47 +1200</lastBuildDate>
        <atom:link href="http://danskaf.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Home VPN</title>
            <link>http://danskaf.dev/posts/2021/07/home-vpn/</link>
            <pubDate>Sun, 25 Jul 2021 17:05:47 +1200</pubDate>
            
            <guid>http://danskaf.dev/posts/2021/07/home-vpn/</guid>
            <description>As the amount of services I have running on my home-network increases it&amp;rsquo;s become more and more sensible to have a secure way of accessing them while out of the house.
Wireguard is a free and open-source program that implements encrypted virtual private networks that has support for Windows, MacOS, Linux and Android. I chose wireguard because it supported by NetworkManger and all devices I use run NetworkManger.
This blog post refers to a Linux peer but the steps for connecting to a client are pretty much ubiquitous for all clients.</description>
            <content type="html"><![CDATA[<p><img src="padlock.png" alt="padlock"></p>
<p>As the amount of services I have running on my home-network increases it&rsquo;s become
more and more sensible to have a secure way of accessing them while out of the
house.</p>
<p>Wireguard is a free and open-source program that implements encrypted virtual
private networks that has support for Windows, MacOS, Linux and Android.
I chose wireguard because it supported by NetworkManger and all devices I use
run NetworkManger.</p>
<p>This blog post refers to a Linux peer but the steps for connecting to a client
are pretty much ubiquitous for all clients.</p>
<h2 id="dependencies">Dependencies</h2>
<ul>
<li>Wireguard client package</li>
<li>Static IP or Dynamic DNS</li>
<li>Linux based OS to install Wireguard server</li>
<li>Git</li>
</ul>
<p>When we create the configuration files for our VPN we need to point to the
clients to an address that will always be up. If your ISP does not provide you
the option to obtain a static IP address the alternative is to set up a Dynamic
Domain Name so even if your IP changes users can still be directed to the
correct location.</p>
<h3 id="installing-the-wireguard-server">Installing the Wireguard server</h3>
<p>The wireguard server can be installed manually however it is much simpler to
use a script to automate the process, as it automatically handles the creation
of the encryption keys and certificates, otherwise we would have to generate
these ourself.</p>
<p><a href="https://github.com/Nyr/wireguard-install">Nyr&rsquo;s</a> wireguard script on github is
what I used to install wireguard and it features highly configurable options for installing and managing wireguard post-installation.</p>
<p>Create a directory for the wireguard installation, <code>cd</code> and paste the following
command:</p>
<pre><code>$ wget https://git.io/wireguard -O wireguard-install.sh &amp;&amp; bash wireguard-install.sh
</code></pre><p>To run the script we need to run it as root:</p>
<pre><code>$ sudo bash wireguard-install.sh
</code></pre><p>When it asks, &ldquo;<code>What is the public IPv4 address or hostname?</code>&rdquo;, enter your
static IP or Domain name here.</p>
<p>Leave the port as default</p>
<p>Pick whatever name you want for your first client and DNS server for the client.
I set my client name to <code>Dan</code> and chose my DNS server as <code>Google</code></p>
<p>Once it has setup it will produce a config file in <code>/root/&lt;clientName&gt;.conf</code>
or if you are using an Android device you can simply scan the QR code and you
are done.</p>
<h3 id="connecting-a-linux-client">Connecting a Linux Client</h3>
<p>Ensure all packages are up to date and install wireguard-tools package.</p>
<pre><code>$ sudo pacman -Syyu wireguard-tools
</code></pre><p>Copy the configuration file created earlier to a safe place on your client
machine.</p>
<p>Some desktop environments may have options in the settings for adding a VPN
connection however I found the experience to be a bit hit and miss so using the
NetworkManger command line interface -<code>nmcli</code> is the simplest solution.</p>
<pre><code>$ nmcli connection import type wireguard file /path/to/&lt;clientName&gt;.conf
</code></pre><p>The default configuration files are in <code>/etc/wireguard/wg0.conf</code>. I am happy
with the default settings however we easily change things like the address subnet
interface and port here also every subsequent peer we create is added to this
file.</p>
<p>The config files for the peers also have options like specifying allowed ip
addresses, all these options are we documented in the Arch-wiki and the
Wireguard documentation.</p>
<hr>
<h3 id="references-and-links">References and links</h3>
<ul>
<li><a href="https://commons.wikimedia.org/wiki/File:Antu_object-unlocked.svg">Padlock vector image used under creative commons license 4.0</a></li>
<li><a href="https://github.com/Nyr/wireguard-install">Nyr Wireguard install script</a></li>
<li><a href="https://wiki.archlinux.org/title/WireGuard">Arch-wiki</a></li>
<li><a href="https://www.wireguard.com/quickstart/">Wireguard</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>User Systemd Service</title>
            <link>http://danskaf.dev/posts/2021/07/user-systemd-service/</link>
            <pubDate>Sat, 17 Jul 2021 14:23:04 +1200</pubDate>
            
            <guid>http://danskaf.dev/posts/2021/07/user-systemd-service/</guid>
            <description>Creating your own systemd services.
I recently created a discord bot, and constantly starting it manually was frustrating. As most linux distributions come with Systemd, I decided to use this opportunity to learn to create custom services and solve my problem.
Though this blog post refers to a python script you can use it with any script or program of your choice.
Dependencies  A &amp;ldquo;bloated&amp;rdquo; linux distro that uses systemd A script or program to manage   Systemd service files are located in the /etc/systemd/system/ directory.</description>
            <content type="html"><![CDATA[<p><img src="page-logo.png" alt="systemdlogo"></p>
<p>Creating your own systemd services.</p>
<p>I recently created a discord bot, and constantly starting it manually was
frustrating. As most linux distributions come with Systemd, I decided to use
this opportunity to learn to create custom services and solve my problem.</p>
<p>Though this blog post refers to a python script you can use it with any script
or program of your choice.</p>
<h3 id="dependencies">Dependencies</h3>
<ul>
<li>A &ldquo;bloated&rdquo; linux distro that uses systemd</li>
<li>A script or program to manage</li>
</ul>
<hr>
<p>Systemd service files are located in the <code>/etc/systemd/system/</code> directory.</p>
<p>Create a unit file with your chosen name of your service followed by <code>.service</code>
, mine for instance was:</p>
<pre><code>/etc/systemd/system/ $ sudo touch discord-bot.service
</code></pre><p>This is my file I will explain the relevant parts below</p>
<pre><code>[Unit]
Description=&lt;short_description_of_program&gt;
After=network.target
StartLimitIntervalsec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=&lt;your_username&gt;
WorkingDirectory=&lt;path_to_program_files&gt;
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=&lt;program_ID&gt;
ExecStart=/usr/bin/python3 /home/&lt;user&gt;/discordBot/main.py

[Install]
WantedBy=multi-user.target
</code></pre><p>In the <code>[Unit]</code> section we can handle dependencies, as my bot needs to be
connected to the internet we specify the <code>After</code> option for the service to only
start after the network interfaces are up.</p>
<p>In the <code>[Service]</code> section we can set the type of the service, the Arch-Wiki<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
provides an in depth description of the different service types.
For most cases <code>Type=simple</code> will be all you need. <code>User</code> will  be the normal
user who is running the service.</p>
<p>For <code>ExecStart</code> we specify the command that is being run.
In my case the line in the unit file:</p>
<pre><code>ExecStart=/usr/bin/python3 /home/discordBot/main.py
</code></pre><p>is the same as running the following command while <code>cd</code> into the working directory
of my bot:</p>
<pre><code>$ python3 main.py
</code></pre><p>You may need to specify a working directory that contains any other files needed
for the runtime of your service. This is accomplished with the
<code>WorkingDirectory</code> option, in my case this directory contained the token files
for the discord api.</p>
<h3 id="logging">logging</h3>
<p>We added 3 special options to enable logging of our service</p>
<ul>
<li><code>StandardOutput=syslog</code></li>
<li><code>StandardError=syslog</code></li>
<li><code>SyslogIdentifier=&lt;program_ID&gt;</code></li>
</ul>
<p>This redirects all stdout and stderr to the syslog, we need to create a unique
program identifier.</p>
<p>Next create a file in <code>/etc/rsyslog.d/&lt;service_name&gt;.conf</code></p>
<pre><code>if $programname = '&lt;program_ID&gt;' then /path/to/log/file.log
&amp; stop
</code></pre><p>and then set the logfile ownership to the syslog user with:</p>
<pre><code># chown syslog:adm /path/to/file.log
</code></pre><hr>
<p>All thats left is to restart the restart the rsyslog service.</p>
<pre><code># systemctl restart rsyslog
</code></pre><p>Enable our newly created service so it starts on boot.</p>
<pre><code># systemctl enable discordBot.service
</code></pre><p>Start the service.</p>
<pre><code># systemctl start discordBot.service
</code></pre><h3 id="references">References</h3>
<ul>
<li>
<p><a href="https://github.com/systemd/brand.systemd.io/blob/master/assets/page-logo.png">systemd logo used under creative commons license 4.0</a></p>
</li>
<li>
<p><a href="https://wiki.archlinux.org/title/systemd">Archwiki</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/37585758/how-to-redirect-output-of-systemd-service-to-a-file">Stack Overflow</a></p>
</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://wiki.archlinux.org/title/Systemd#Service_types">Service Types - Arch wiki</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Hosted on My Pi</title>
            <link>http://danskaf.dev/posts/2021/06/hosted-on-my-pi/</link>
            <pubDate>Thu, 24 Jun 2021 16:10:26 +1200</pubDate>
            
            <guid>http://danskaf.dev/posts/2021/06/hosted-on-my-pi/</guid>
            <description>This site is hosted using Apache web server on Raspberry Pi OS.
As a brief guide:
 Ensure all repos and packages are up to date. Install the Apache server and enable the ssl and rewrite modules for https support. Enable the service to start at boot. Copy the html files to the webserver directory.  </description>
            <content type="html"><![CDATA[<p><img src="serverPi.jpg" alt="ServerPi"></p>
<p>This site is hosted using <code>Apache web server</code> on <code>Raspberry Pi OS</code>.</p>
<p>As a brief guide:</p>
<ol>
<li>Ensure all repos and packages are up to date.</li>
<li>Install the <code>Apache</code> server and enable the <code>ssl</code> and <code>rewrite</code> modules for
https support.</li>
<li>Enable the service to start at boot.</li>
<li>Copy the html files to the webserver directory.</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
